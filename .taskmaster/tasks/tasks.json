{
  "master": {
    "tasks": [
      {
        "id": 16,
        "title": "Implement Responsive Intake Form",
        "description": "Create a multi-language (English & Spanish) intake form with required field validation, UTM parameter auto-detection, insurance provider selection, and HIPAA compliance features. Implement PWA offline caching and accessibility standards.",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "Build a Next.js 14 component with Tailwind CSS for responsive design. Implement form validation with real-time error feedback using React Hook Form and Zod. Add PWA features for offline caching using Service Workers. Include UTM parameter parsing, insurance provider dropdown with pre-loaded options, HIPAA consent checkboxes, and accessibility features (WCAG 2.2 AA compliant).",
        "testStrategy": "Automate form submission tests with Cypress. Validate offline caching by simulating network disconnection. Check accessibility with axe-core library. Test UTM parameter parsing and fallback to 'Walk-in' attribution. Verify PWA manifest and service worker functionality.",
        "subtasks": [
          {
            "id": 1,
            "title": "Create TypeScript types and interfaces for form data",
            "description": "Defined type definitions for form data structures in src/types/form.ts",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Zod validation schema with multi-language support",
            "description": "Developed validation schema with localized error messages in src/lib/validation.ts",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Build comprehensive responsive intake form component",
            "description": "Created reusable IntakeForm.tsx component with responsive Tailwind CSS design",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Update main page to integrate the form",
            "description": "Integrated form component into src/app/page.tsx with proper routing",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Add required dependencies",
            "description": "Installed react-hook-form, zod, lucide-react, and PWA dependencies",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Fix Next.js dependency issue",
            "description": "Resolve any Next.js version compatibility issues in the project",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Test form functionality",
            "description": "Validate form submission, validation, and error handling across languages",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Add PWA manifest and service worker",
            "description": "Implement PWA manifest file and service worker for offline caching",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "Implement backend API integration",
            "description": "Connect form submissions to backend API for data storage",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 17,
        "title": "Implement Attribution Auto-Capture",
        "description": "Parse UTM parameters and fallback to 'Walk-in' for attribution source when no parameters are present.",
        "details": "Create middleware in FastAPI to extract UTM parameters from incoming requests. Implement logic to default to 'Walk-in' if no attribution source is detected. Store the attribution source in the PatientSession entity.",
        "testStrategy": "Simulate different UTM parameter scenarios and verify attribution source is correctly captured. Test fallback behavior when no parameters are present.",
        "priority": "medium",
        "dependencies": [
          16
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Implement Insurance Selector",
        "description": "Create a dropdown with pre-loaded insurance plans and support for free-text override.",
        "details": "Develop a component with a dropdown containing all accepted insurance plans (VSP, EyeMed, etc.). Include logo assets for each plan. Allow free-text override for insurance provider. Store selected insurance ID in PatientSession.",
        "testStrategy": "Validate dropdown functionality with all insurance options. Test free-text override and ensure correct insurance ID is stored.",
        "priority": "medium",
        "dependencies": [
          16
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Implement Doctor Satisfaction Survey",
        "description": "Create a 1â€“5 star rating system with optional comment field for doctor satisfaction.",
        "details": "Design a component with a star rating system that triggers a post-visit SMS/email prompt. Include a free-text comment field. Store satisfaction score and comment in PatientSession.",
        "testStrategy": "Validate star rating functionality and comment submission. Test SMS/email trigger logic after form submission.",
        "priority": "medium",
        "dependencies": [
          16
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Implement Real-Time Analytics Dashboard",
        "description": "Create a dashboard showing channel mix, insurance mix, and average rating per doctor.",
        "details": "Develop a real-time dashboard using Supabase Realtime or Redash. Aggregate data from PatientSession entity. Display metrics for channel mix, insurance mix, and doctor ratings. Provide CSV and webhook export options.",
        "testStrategy": "Validate data aggregation and real-time updates. Test CSV and webhook export functionality with sample data.",
        "priority": "high",
        "dependencies": [
          16,
          17,
          18,
          19
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Implement Role-Based Access Control",
        "description": "Create access controls for different user roles (Front-Desk, Marketing, Provider).",
        "details": "Implement Auth0 for SSO and role-based access. Define roles for Front-Desk (create), Marketing (read dashboards), and Provider (view own scores). Enforce access controls on all endpoints.",
        "testStrategy": "Validate role-based access for all user types. Test permissions for creating, reading, and viewing data.",
        "priority": "medium",
        "dependencies": [
          16,
          20
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "Implement HIPAA Security Measures",
        "description": "Ensure all data is encrypted and meets HIPAA, SOC 2, and GDPR compliance standards.",
        "details": "Implement AES-256 encryption for data at rest. Use TLS 1.3 for data in transit. Set up audit logging for all actions. Conduct penetration testing for security compliance.",
        "testStrategy": "Validate encryption and TLS configurations. Test audit logging and penetration testing for compliance.",
        "priority": "high",
        "dependencies": [
          20,
          21
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "Integrate with Scheduling System",
        "description": "Pass form data to existing ScheduleYourExam flow.",
        "details": "Create an API endpoint to send form data to the ScheduleYourExam system. Ensure data mapping between the intake form and scheduling system. Validate data integrity and synchronization.",
        "testStrategy": "Validate data mapping and synchronization with the scheduling system. Test API endpoint for form data submission.",
        "priority": "medium",
        "dependencies": [
          20,
          21,
          22
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "Implement SMS/Email Notification System",
        "description": "Set up SMS and email triggers for post-visit satisfaction survey.",
        "details": "Integrate with an SMS gateway and email service provider. Set up triggers to send 1-click survey prompts after visit completion. Ensure notifications are sent via SMS or email based on user preference.",
        "testStrategy": "Validate SMS and email triggers after form submission. Test notification delivery and user preference handling.",
        "priority": "medium",
        "dependencies": [
          16,
          20,
          21
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "Conduct Penetration Testing",
        "description": "Perform security testing to ensure HIPAA and SOC 2 compliance.",
        "details": "Engage a certified security firm to conduct penetration testing. Validate all security measures including encryption, access controls, and audit logging. Ensure compliance with HIPAA, SOC 2, and GDPR standards.",
        "testStrategy": "Validate penetration testing results and ensure all security requirements are met. Confirm compliance with HIPAA, SOC 2, and GDPR standards.",
        "priority": "high",
        "dependencies": [
          22,
          23,
          24
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-03T01:02:43.526Z",
      "updated": "2025-08-03T16:50:37.970Z",
      "description": "Tasks for master context"
    }
  }
}